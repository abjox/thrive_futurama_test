// Mocks generated by Mockito 5.4.0 from annotations
// in thrive_futurama/test/network_middleware_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:logger/src/logger.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:thrive_futurama/core/network/model/character.dart' as _i2;
import 'package:thrive_futurama/core/network/model/info.dart' as _i5;
import 'package:thrive_futurama/core/network/model/question.dart' as _i6;
import 'package:thrive_futurama/core/network/network_service.dart' as _i3;
import 'package:thrive_futurama/core/services/connectivity_service.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeName_0 extends _i1.SmartFake implements _i2.Name {
  _FakeName_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeImages_1 extends _i1.SmartFake implements _i2.Images {
  _FakeImages_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NetworkServiceProtocol].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkServiceProtocol extends _i1.Mock
    implements _i3.NetworkServiceProtocol {
  MockNetworkServiceProtocol() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.Info>> info() => (super.noSuchMethod(
        Invocation.method(
          #info,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Info>>.value(<_i5.Info>[]),
      ) as _i4.Future<List<_i5.Info>>);
  @override
  _i4.Future<List<_i2.Character>> characters() => (super.noSuchMethod(
        Invocation.method(
          #characters,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Character>>.value(<_i2.Character>[]),
      ) as _i4.Future<List<_i2.Character>>);
  @override
  _i4.Future<List<_i6.Question>> questions() => (super.noSuchMethod(
        Invocation.method(
          #questions,
          [],
        ),
        returnValue: _i4.Future<List<_i6.Question>>.value(<_i6.Question>[]),
      ) as _i4.Future<List<_i6.Question>>);
}

/// A class which mocks [ConnectivityServiceProtocol].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityServiceProtocol extends _i1.Mock
    implements _i7.ConnectivityServiceProtocol {
  MockConnectivityServiceProtocol() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> hasNetworokConnection() => (super.noSuchMethod(
        Invocation.method(
          #hasNetworokConnection,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [Logger].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogger extends _i1.Mock implements _i8.Logger {
  MockLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void v(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #v,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void d(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #d,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void i(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #i,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void w(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #w,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void e(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #e,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void wtf(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #wtf,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void log(
    _i8.Level? level,
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #log,
          [
            level,
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isClosed() => (super.noSuchMethod(
        Invocation.method(
          #isClosed,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Info].
///
/// See the documentation for Mockito's code generation for more information.
class MockInfo extends _i1.Mock implements _i5.Info {
  MockInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get synopsis => (super.noSuchMethod(
        Invocation.getter(#synopsis),
        returnValue: '',
      ) as String);
  @override
  String get yearsAired => (super.noSuchMethod(
        Invocation.getter(#yearsAired),
        returnValue: '',
      ) as String);
  @override
  List<_i5.Creator> get creators => (super.noSuchMethod(
        Invocation.getter(#creators),
        returnValue: <_i5.Creator>[],
      ) as List<_i5.Creator>);
  @override
  int get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: 0,
      ) as int);
  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [Character].
///
/// See the documentation for Mockito's code generation for more information.
class MockCharacter extends _i1.Mock implements _i2.Character {
  MockCharacter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: 0,
      ) as int);
  @override
  String get age => (super.noSuchMethod(
        Invocation.getter(#age),
        returnValue: '',
      ) as String);
  @override
  String get gender => (super.noSuchMethod(
        Invocation.getter(#gender),
        returnValue: '',
      ) as String);
  @override
  String get species => (super.noSuchMethod(
        Invocation.getter(#species),
        returnValue: '',
      ) as String);
  @override
  String get occupation => (super.noSuchMethod(
        Invocation.getter(#occupation),
        returnValue: '',
      ) as String);
  @override
  _i2.Name get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _FakeName_0(
          this,
          Invocation.getter(#name),
        ),
      ) as _i2.Name);
  @override
  _i2.Images get images => (super.noSuchMethod(
        Invocation.getter(#images),
        returnValue: _FakeImages_1(
          this,
          Invocation.getter(#images),
        ),
      ) as _i2.Images);
  @override
  List<String> get sayings => (super.noSuchMethod(
        Invocation.getter(#sayings),
        returnValue: <String>[],
      ) as List<String>);
  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [Question].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuestion extends _i1.Mock implements _i6.Question {
  MockQuestion() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: 0,
      ) as int);
  @override
  String get question => (super.noSuchMethod(
        Invocation.getter(#question),
        returnValue: '',
      ) as String);
  @override
  List<String> get possibleAnswers => (super.noSuchMethod(
        Invocation.getter(#possibleAnswers),
        returnValue: <String>[],
      ) as List<String>);
  @override
  String get correctAnswer => (super.noSuchMethod(
        Invocation.getter(#correctAnswer),
        returnValue: '',
      ) as String);
  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
